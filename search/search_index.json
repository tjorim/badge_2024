{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fri3d Camp 2024 Badge So you got a cool badge, what can you do with it? ;-) Play with it You don't need to be a programming wizard to have fun with this badge! Go to the Onboarding pages to see all the cool features we built into the standard firmware. Program it Congratulations! If you want to squash some bugs, you're going to need some tools... You can use C++ in the Arduino editor , or Visual Studio Code If you prefer Python , you can use any plain text editor, but Visual Studio Code works too. If you are into homeassistant and want to connect your badge using esphome . You can either use the command line or esphome dashboard. If typing code is not your thing, you can drag blocks in bipes Revert to Default Firmware After your adventures in programming yielded unexpected results, you might want to go back to the default firmware. Look around for a \"badge reset firmware\" booth on the Fri3d camp. We sort of anticipated this ... :-) If you want to perform the reset yourself: if your badge seems to reset every few seconds. You can force every ESP32-based board as follows: press and hold \"start\" button (this is the \"boot\" button of the microcontroller) press and release \"reset\" button your badge will now be ready to be flashed with a new program install ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation download the latest firmware from https://github.com/Fri3dCamp/badge_2024_micropython on your command line interface type: python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin Documentation The introduction: https://github.com/Fri3dCamp/badge_2024 The hardware: https://github.com/Fri3dCamp/badge_2024_hw C++ examples: https://github.com/Fri3dCamp/badge_2024_arduino pre-loaded Firmware: https://github.com/Fri3dCamp/badge_2024_micropython","title":"Fri3d Camp 2024 Badge"},{"location":"#fri3d-camp-2024-badge","text":"So you got a cool badge, what can you do with it? ;-)","title":"Fri3d Camp 2024 Badge"},{"location":"#play-with-it","text":"You don't need to be a programming wizard to have fun with this badge! Go to the Onboarding pages to see all the cool features we built into the standard firmware.","title":"Play with it"},{"location":"#program-it","text":"Congratulations! If you want to squash some bugs, you're going to need some tools... You can use C++ in the Arduino editor , or Visual Studio Code If you prefer Python , you can use any plain text editor, but Visual Studio Code works too. If you are into homeassistant and want to connect your badge using esphome . You can either use the command line or esphome dashboard. If typing code is not your thing, you can drag blocks in bipes","title":"Program it"},{"location":"#revert-to-default-firmware","text":"After your adventures in programming yielded unexpected results, you might want to go back to the default firmware. Look around for a \"badge reset firmware\" booth on the Fri3d camp. We sort of anticipated this ... :-) If you want to perform the reset yourself: if your badge seems to reset every few seconds. You can force every ESP32-based board as follows: press and hold \"start\" button (this is the \"boot\" button of the microcontroller) press and release \"reset\" button your badge will now be ready to be flashed with a new program install ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation download the latest firmware from https://github.com/Fri3dCamp/badge_2024_micropython on your command line interface type: python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin","title":"Revert to Default Firmware"},{"location":"#documentation","text":"The introduction: https://github.com/Fri3dCamp/badge_2024 The hardware: https://github.com/Fri3dCamp/badge_2024_hw C++ examples: https://github.com/Fri3dCamp/badge_2024_arduino pre-loaded Firmware: https://github.com/Fri3dCamp/badge_2024_micropython","title":"Documentation"},{"location":"arduino/","text":"Arduino documentation","title":"Arduino documentation"},{"location":"arduino/#arduino-documentation","text":"","title":"Arduino documentation"},{"location":"bipes/","text":"BIPES documentation","title":"BIPES documentation"},{"location":"bipes/#bipes-documentation","text":"","title":"BIPES documentation"},{"location":"esphome/","text":"ESPHome documentation This page contains reference code for each badge component. It currently assumes you have esphome installed and are familiar adding a device. Common code substitutions: esphome_name: fri3d2024 esphome: name: ${esphome_name} esp32: board: esp32-s3-devkitc-1 framework: type: arduino Display spi: clk_pin: GPIO7 mosi_pin: GPIO6 display: - platform: ili9xxx model: ST7789V dimensions: height: 240 width: 296 transform: swap_xy: true mirror_x: false data_rate: 80MHz dc_pin: GPIO4 cs_pin: GPIO5 reset_pin: GPIO48 auto_clear_enabled: false lambda: |- it.image(0, 0, id(my_image)); # it.print(0, 0, id(my_font), \"Hello World!\"); # it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state); # sensor.living_room_temperature # it.line(0, 0, 50, 50); font: - file: \"opensans.ttf\" id: my_font size: 20 image: - file: \"fri3d.png\" id: my_image type: RGB24 TODO - refresh log error Status light light: - platform: status_led name: \"State\" id: \"state\" pin: GPIO21 RGB leds light: - platform: neopixelbus type: GRB variant: WS2812 pin: GPIO12 num_leds: 5 name: \"NeoPixel Light\" Buttons binary_sensor: - platform: gpio pin: number: GPIO39 mode: input: true pullup: true inverted: true name: \"A\" - platform: gpio pin: number: GPIO40 mode: input: true pullup: true inverted: true name: \"B\" - platform: gpio pin: number: GPIO38 mode: input: true pullup: true inverted: true name: \"X\" - platform: gpio pin: number: GPIO41 mode: input: true pullup: true inverted: true name: \"Y\" - platform: gpio pin: number: GPIO45 mode: input: true pullup: true inverted: true name: \"menu\" - platform: gpio pin: number: GPIO0 mode: input: true #pullup: true inverted: true name: \"start\" Joystick sensor: - platform: adc id: joystick_x name: \"Joystick X axis\" pin: GPIO01 internal: True attenuation: auto update_interval: 500ms - platform: adc id: joystick_y name: \"Joystick Y axis\" pin: GPIO03 internal: True attenuation: 11db update_interval: 500ms TODO - disable logging - on_xxx: left/right & up/down Buzzer TODO - test Accelerometer i2c: sda: GPIO9 scl: GPIO18 scan: true id: bus_i2c TODO - contribute code & test IR Receiver remote_receiver: pin: number: GPIO11 inverted: true mode: input: true pullup: true dump: all TODO - test Battery monitor TODO - test AUX power TODO - test SD Card TODO - define use case","title":"ESPHome documentation"},{"location":"esphome/#esphome-documentation","text":"This page contains reference code for each badge component. It currently assumes you have esphome installed and are familiar adding a device.","title":"ESPHome documentation"},{"location":"esphome/#common-code","text":"substitutions: esphome_name: fri3d2024 esphome: name: ${esphome_name} esp32: board: esp32-s3-devkitc-1 framework: type: arduino","title":"Common code"},{"location":"esphome/#display","text":"spi: clk_pin: GPIO7 mosi_pin: GPIO6 display: - platform: ili9xxx model: ST7789V dimensions: height: 240 width: 296 transform: swap_xy: true mirror_x: false data_rate: 80MHz dc_pin: GPIO4 cs_pin: GPIO5 reset_pin: GPIO48 auto_clear_enabled: false lambda: |- it.image(0, 0, id(my_image)); # it.print(0, 0, id(my_font), \"Hello World!\"); # it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state); # sensor.living_room_temperature # it.line(0, 0, 50, 50); font: - file: \"opensans.ttf\" id: my_font size: 20 image: - file: \"fri3d.png\" id: my_image type: RGB24 TODO - refresh log error","title":"Display"},{"location":"esphome/#status-light","text":"light: - platform: status_led name: \"State\" id: \"state\" pin: GPIO21","title":"Status light"},{"location":"esphome/#rgb-leds","text":"light: - platform: neopixelbus type: GRB variant: WS2812 pin: GPIO12 num_leds: 5 name: \"NeoPixel Light\"","title":"RGB leds"},{"location":"esphome/#buttons","text":"binary_sensor: - platform: gpio pin: number: GPIO39 mode: input: true pullup: true inverted: true name: \"A\" - platform: gpio pin: number: GPIO40 mode: input: true pullup: true inverted: true name: \"B\" - platform: gpio pin: number: GPIO38 mode: input: true pullup: true inverted: true name: \"X\" - platform: gpio pin: number: GPIO41 mode: input: true pullup: true inverted: true name: \"Y\" - platform: gpio pin: number: GPIO45 mode: input: true pullup: true inverted: true name: \"menu\" - platform: gpio pin: number: GPIO0 mode: input: true #pullup: true inverted: true name: \"start\"","title":"Buttons"},{"location":"esphome/#joystick","text":"sensor: - platform: adc id: joystick_x name: \"Joystick X axis\" pin: GPIO01 internal: True attenuation: auto update_interval: 500ms - platform: adc id: joystick_y name: \"Joystick Y axis\" pin: GPIO03 internal: True attenuation: 11db update_interval: 500ms TODO - disable logging - on_xxx: left/right & up/down","title":"Joystick"},{"location":"esphome/#buzzer","text":"TODO - test","title":"Buzzer"},{"location":"esphome/#accelerometer","text":"i2c: sda: GPIO9 scl: GPIO18 scan: true id: bus_i2c TODO - contribute code & test","title":"Accelerometer"},{"location":"esphome/#ir-receiver","text":"remote_receiver: pin: number: GPIO11 inverted: true mode: input: true pullup: true dump: all TODO - test","title":"IR Receiver"},{"location":"esphome/#battery-monitor","text":"TODO - test","title":"Battery monitor"},{"location":"esphome/#aux-power","text":"TODO - test","title":"AUX power"},{"location":"esphome/#sd-card","text":"TODO - define use case","title":"SD Card"},{"location":"micropython/","text":"MicroPython documentation Flash the default fri3d micropython firmware download firmware from https://github.com/cheops/fri3d-ota/tree/main/ota/fri3d_badge_2024 select the version and then the *.zip file in that folder flasher app https://fri3d-flasher.vercel.app/#/ If your download fails, you might have more success if you put the badge in DOWNLOAD mode manually: - PRESS + HOLD the START button - PRESS the RESET button (while HOLDING the START button) - the badge has now restarted in download mode after the download you might need to reset the badge to boot normally (PRESS the RESET button) How to run a local file Install mpremote howto TLDR; pip install mpremote mpremote resume run local_test_file.py Unfortunately Thonny interrupts the startup of the badge when connecting, leaving some items (spi, display) in an undefined state. The same for mpremote if not supplied with the resume argument. how to copy a file to the badge mpremote resume fs cp local_path/file.jpg :file.jpg Micropython libraries Micropython quick reference for the esp32 Micropython standard libraries overview doc The badge has lvgl built-in. Buttons demo demo_buttons.py Joystick demo demo_joystick.py Other interesting links - https://github.com/peterhinch/micropython-samples - https://github.com/mcauser/awesome-micropython micropython game ideas https://hackaday.com/2021/05/25/simple-micropython-game-is-a-30-minute-game-dev-course/ pinball link1 or link2 gameESP snake","title":"MicroPython documentation"},{"location":"micropython/#micropython-documentation","text":"","title":"MicroPython documentation"},{"location":"micropython/#flash-the-default-fri3d-micropython-firmware","text":"download firmware from https://github.com/cheops/fri3d-ota/tree/main/ota/fri3d_badge_2024 select the version and then the *.zip file in that folder flasher app https://fri3d-flasher.vercel.app/#/ If your download fails, you might have more success if you put the badge in DOWNLOAD mode manually: - PRESS + HOLD the START button - PRESS the RESET button (while HOLDING the START button) - the badge has now restarted in download mode after the download you might need to reset the badge to boot normally (PRESS the RESET button)","title":"Flash the default fri3d micropython firmware"},{"location":"micropython/#how-to-run-a-local-file","text":"Install mpremote howto TLDR; pip install mpremote mpremote resume run local_test_file.py Unfortunately Thonny interrupts the startup of the badge when connecting, leaving some items (spi, display) in an undefined state. The same for mpremote if not supplied with the resume argument.","title":"How to run a local file"},{"location":"micropython/#how-to-copy-a-file-to-the-badge","text":"mpremote resume fs cp local_path/file.jpg :file.jpg","title":"how to copy a file to the badge"},{"location":"micropython/#micropython-libraries","text":"Micropython quick reference for the esp32 Micropython standard libraries overview doc The badge has lvgl built-in. Buttons demo demo_buttons.py Joystick demo demo_joystick.py Other interesting links - https://github.com/peterhinch/micropython-samples - https://github.com/mcauser/awesome-micropython","title":"Micropython libraries"},{"location":"micropython/#micropython-game-ideas","text":"https://hackaday.com/2021/05/25/simple-micropython-game-is-a-30-minute-game-dev-course/ pinball link1 or link2 gameESP snake","title":"micropython game ideas"},{"location":"micropython/lvgl/","text":"LVGL badge_2024_micropython is build with LVLG v9.1 included links lvgl homepage https://lvgl.io/ lvgl documentation https://docs.lvgl.io/9.1/ python examples (v8.4) Unfortunately for v9.x the python examples are not available any more This are the main differences between v8.x and v9.x https://docs.lvgl.io/9.0/CHANGELOG.html and more specific https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes - lvgl live python examples (v8.4) https://docs.lvgl.io/8.4/examples.html - lvgl python examples source code (v8.4) (search for *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples online simulator There is an online micropython + lvgl (v9.0) simulator available https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html This is very convenient to prototype new screens Simulator Examples button # Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) # Create a button with a label scr = lv.obj() btn = lv.button(scr) btn.align(lv.ALIGN.CENTER, 0, 0) label = lv.label(btn) label.set_text('Hello World!') lv.screen_load(scr) button in a class with callback, remembering state # Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) class CounterBtn: def __init__(self): screen = lv.screen_active() screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN) self.btn = lv.button(screen) self.btn.align(lv.ALIGN.CENTER, 0, 0) self.lbl = lv.label(self.btn) self.lbl.set_text(\"Button\") self.cnt = 0 self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None) def btn_cb(self, evt): code = evt.get_code() if code == lv.EVENT.CLICKED: self.cnt += 1 print(self.cnt) self.lbl.set_text(\"Button: \" + str(self.cnt)) counter_btn = CounterBtn() wifi-config screen # Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) class TextArea: def __init__(self, screen): self._screen = screen self.ta = lv.textarea(screen) self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None) self._kb = None def _ta_event_cb(self, event): code = event.get_code() if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED: if self._kb is None: # create keyboard self._kb = lv.keyboard(self._screen) self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) ) self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0) self._kb.set_x(0) self._kb.set_textarea(self.ta) self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None) elif code == lv.EVENT.DEFOCUSED: if self._kb is not None: self._kb.delete() self._kb = None def _kb_event_cb(self, event): code = event.get_code() if code == lv.EVENT.READY or code == lv.EVENT.CANCEL: self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta) class ButtonLabel: def __init__(self, screen, label, cb): btn = lv.button(screen) self.btn = btn btn.set_height(30) lbl = lv.label(btn) lbl.set_text(label) lbl.align(lv.ALIGN.CENTER, 0, 0) btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None) self.cb = cb def _bt_event_cb(self, event): # code = event.get_code() self.cb() class WifiScreen: def __init__(self): self._screen = lv.obj() self._construct() def load(self): lv.screen_load(self._screen) def _save_cb(self): ssid = self.ss_ta.ta.get_text() key = self.key_ta.ta.get_text() print(f\"{ssid=}, {key=}\") # TODO save def _cancel_cb(self): print(\"Cancel\") #home_screen = fri3d.screens.home.HomeScreen() #home_screen.load() def _construct(self): screen = self._screen # title title = lv.label(screen) title.set_text(\"Wifi Configuration\") title.align(lv.ALIGN.TOP_MID, 0, 0) # ssid textarea ss_ta = TextArea(screen) self.ss_ta = ss_ta ss_ta.ta.set_text(\"\") ss_ta.ta.set_one_line(True) ss_ta.ta.set_width(lv.pct(50)) ss_ta.ta.set_pos(100, 20) # ssid label ss_lbl = lv.label(screen) ss_lbl.set_text(\"SSID:\") ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0) # key textarea key_ta = TextArea(screen) self.key_ta = key_ta key_ta.ta.set_text(\"\") key_ta.ta.set_password_mode(True) key_ta.ta.set_one_line(True) key_ta.ta.set_width(lv.pct(50)) key_ta.ta.set_pos(100, 60) # key label key_lbl = lv.label(screen) key_lbl.set_text(\"Key:\") key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0) # save button sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb) sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0) # cancel button cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb) cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0) w = WifiScreen() w.load() canvas red border around a golden background # Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) scr = lv.screen_active() buf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO) canvas = lv.canvas(scr) canvas.set_draw_buf(buf) canvas.center() layer = lv.layer_t() canvas.init_layer(layer) dsc = lv.draw_rect_dsc_t() dsc.bg_color = lv.color_hex(0xffbf00) dsc.bg_opa = lv.OPA.COVER dsc.border_color = lv.palette_main(lv.PALETTE.RED) dsc.border_width = 2 dsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM dsc.border_opa = lv.OPA.COVER dsc.radius = 61 a = lv.area_t() a.x1 = 0 a.y1 = 0 a.x2 = 295 a.y2 = 239 lv.draw_rect(layer, dsc, a) canvas.finish_layer(layer) real examples load png image # load fri3d_logo-min.png png = open('fri3d_logo-min.png', 'rb') data = png.read() png.close() img = lv.image(lv.screen_active()) imgd = lv.image_dsc_t() imgd.header.cf = lv.COLOR_FORMAT.ARGB8888 imgd.header.w = 240 imgd.header.h = 240 imgd.data = data imgd.data_size = len(data) img.set_src(imgd) img.align(lv.ALIGN.CENTER, 0, 0)","title":"LVGL"},{"location":"micropython/lvgl/#lvgl","text":"badge_2024_micropython is build with LVLG v9.1 included","title":"LVGL"},{"location":"micropython/lvgl/#links","text":"lvgl homepage https://lvgl.io/ lvgl documentation https://docs.lvgl.io/9.1/","title":"links"},{"location":"micropython/lvgl/#python-examples-v84","text":"Unfortunately for v9.x the python examples are not available any more This are the main differences between v8.x and v9.x https://docs.lvgl.io/9.0/CHANGELOG.html and more specific https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes - lvgl live python examples (v8.4) https://docs.lvgl.io/8.4/examples.html - lvgl python examples source code (v8.4) (search for *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples","title":"python examples (v8.4)"},{"location":"micropython/lvgl/#online-simulator","text":"There is an online micropython + lvgl (v9.0) simulator available https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html This is very convenient to prototype new screens","title":"online simulator"},{"location":"micropython/lvgl/#simulator-examples","text":"","title":"Simulator Examples"},{"location":"micropython/lvgl/#button","text":"# Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) # Create a button with a label scr = lv.obj() btn = lv.button(scr) btn.align(lv.ALIGN.CENTER, 0, 0) label = lv.label(btn) label.set_text('Hello World!') lv.screen_load(scr)","title":"button"},{"location":"micropython/lvgl/#button-in-a-class-with-callback-remembering-state","text":"# Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) class CounterBtn: def __init__(self): screen = lv.screen_active() screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN) self.btn = lv.button(screen) self.btn.align(lv.ALIGN.CENTER, 0, 0) self.lbl = lv.label(self.btn) self.lbl.set_text(\"Button\") self.cnt = 0 self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None) def btn_cb(self, evt): code = evt.get_code() if code == lv.EVENT.CLICKED: self.cnt += 1 print(self.cnt) self.lbl.set_text(\"Button: \" + str(self.cnt)) counter_btn = CounterBtn()","title":"button in a class with callback, remembering state"},{"location":"micropython/lvgl/#wifi-config-screen","text":"# Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) class TextArea: def __init__(self, screen): self._screen = screen self.ta = lv.textarea(screen) self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None) self._kb = None def _ta_event_cb(self, event): code = event.get_code() if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED: if self._kb is None: # create keyboard self._kb = lv.keyboard(self._screen) self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) ) self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0) self._kb.set_x(0) self._kb.set_textarea(self.ta) self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None) elif code == lv.EVENT.DEFOCUSED: if self._kb is not None: self._kb.delete() self._kb = None def _kb_event_cb(self, event): code = event.get_code() if code == lv.EVENT.READY or code == lv.EVENT.CANCEL: self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta) class ButtonLabel: def __init__(self, screen, label, cb): btn = lv.button(screen) self.btn = btn btn.set_height(30) lbl = lv.label(btn) lbl.set_text(label) lbl.align(lv.ALIGN.CENTER, 0, 0) btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None) self.cb = cb def _bt_event_cb(self, event): # code = event.get_code() self.cb() class WifiScreen: def __init__(self): self._screen = lv.obj() self._construct() def load(self): lv.screen_load(self._screen) def _save_cb(self): ssid = self.ss_ta.ta.get_text() key = self.key_ta.ta.get_text() print(f\"{ssid=}, {key=}\") # TODO save def _cancel_cb(self): print(\"Cancel\") #home_screen = fri3d.screens.home.HomeScreen() #home_screen.load() def _construct(self): screen = self._screen # title title = lv.label(screen) title.set_text(\"Wifi Configuration\") title.align(lv.ALIGN.TOP_MID, 0, 0) # ssid textarea ss_ta = TextArea(screen) self.ss_ta = ss_ta ss_ta.ta.set_text(\"\") ss_ta.ta.set_one_line(True) ss_ta.ta.set_width(lv.pct(50)) ss_ta.ta.set_pos(100, 20) # ssid label ss_lbl = lv.label(screen) ss_lbl.set_text(\"SSID:\") ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0) # key textarea key_ta = TextArea(screen) self.key_ta = key_ta key_ta.ta.set_text(\"\") key_ta.ta.set_password_mode(True) key_ta.ta.set_one_line(True) key_ta.ta.set_width(lv.pct(50)) key_ta.ta.set_pos(100, 60) # key label key_lbl = lv.label(screen) key_lbl.set_text(\"Key:\") key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0) # save button sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb) sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0) # cancel button cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb) cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0) w = WifiScreen() w.load()","title":"wifi-config screen"},{"location":"micropython/lvgl/#canvas","text":"red border around a golden background # Initialize import display_driver import lvgl as lv disp = lv.display_get_default() disp.set_resolution(296,240) scr = lv.screen_active() buf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO) canvas = lv.canvas(scr) canvas.set_draw_buf(buf) canvas.center() layer = lv.layer_t() canvas.init_layer(layer) dsc = lv.draw_rect_dsc_t() dsc.bg_color = lv.color_hex(0xffbf00) dsc.bg_opa = lv.OPA.COVER dsc.border_color = lv.palette_main(lv.PALETTE.RED) dsc.border_width = 2 dsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM dsc.border_opa = lv.OPA.COVER dsc.radius = 61 a = lv.area_t() a.x1 = 0 a.y1 = 0 a.x2 = 295 a.y2 = 239 lv.draw_rect(layer, dsc, a) canvas.finish_layer(layer)","title":"canvas"},{"location":"micropython/lvgl/#real-examples","text":"","title":"real examples"},{"location":"micropython/lvgl/#load-png-image","text":"# load fri3d_logo-min.png png = open('fri3d_logo-min.png', 'rb') data = png.read() png.close() img = lv.image(lv.screen_active()) imgd = lv.image_dsc_t() imgd.header.cf = lv.COLOR_FORMAT.ARGB8888 imgd.header.w = 240 imgd.header.h = 240 imgd.data = data imgd.data_size = len(data) img.set_src(imgd) img.align(lv.ALIGN.CENTER, 0, 0)","title":"load png image"},{"location":"noisycricket/","text":"Noisy Cricket Assembly photos All components neatly packaged Spread out in order of soldering Component side of the pcb is where the fri3d logo is 33 Ohm (blue body and orange,orange.black colored bands) resistor on top 120 Ohm (beige body and black,red,black colored bands) risistor on bottom 2 resistors soldered NPN transistor 2N3904 with flat side to the left (back of noisy cricket) Electrolytic capacitor (33 microFarad) Mind the polarity : long leg is positive, short leg is negative, white marking on the body is negative There are 2 holes for positive and 2 holes for negative, choose best fitting ones Pin header soldered on the bottom 2 orientations are possible: on the bottom: this results in an upright position when mounted on the fri3d2024 badge at the back: this results in a front facing position when mounted on the fri3d2024 badge Ready to solder the LED Mind the polarity : long leg is positive, short leg is negative, flat side on the body is negative LED soldered Mind the polarity : positive (long leg) on the bottom, negative on top (short leg, flat side on the body) Overview pictures of soldered Noisy Cricket Noisy Cricket mounted on the fri3d2024 badge Mounted with the pin header soldered on the bottom Mounted with the pin header soldered on the back","title":"Noisy Cricket"},{"location":"noisycricket/#noisy-cricket","text":"","title":"Noisy Cricket"},{"location":"noisycricket/#assembly-photos","text":"All components neatly packaged Spread out in order of soldering Component side of the pcb is where the fri3d logo is 33 Ohm (blue body and orange,orange.black colored bands) resistor on top 120 Ohm (beige body and black,red,black colored bands) risistor on bottom 2 resistors soldered NPN transistor 2N3904 with flat side to the left (back of noisy cricket) Electrolytic capacitor (33 microFarad) Mind the polarity : long leg is positive, short leg is negative, white marking on the body is negative There are 2 holes for positive and 2 holes for negative, choose best fitting ones Pin header soldered on the bottom 2 orientations are possible: on the bottom: this results in an upright position when mounted on the fri3d2024 badge at the back: this results in a front facing position when mounted on the fri3d2024 badge Ready to solder the LED Mind the polarity : long leg is positive, short leg is negative, flat side on the body is negative LED soldered Mind the polarity : positive (long leg) on the bottom, negative on top (short leg, flat side on the body) Overview pictures of soldered Noisy Cricket Noisy Cricket mounted on the fri3d2024 badge Mounted with the pin header soldered on the bottom Mounted with the pin header soldered on the back","title":"Assembly photos"},{"location":"onboarding/","text":"Onboarding documentation Badge Flamingo AKA BFG9000 ( B ig F lamingo G un) Mini-blaster AKA Noisy Cricket Communicator","title":"Onboarding documentation"},{"location":"onboarding/#onboarding-documentation","text":"","title":"Onboarding documentation"},{"location":"onboarding/#badge","text":"","title":"Badge"},{"location":"onboarding/#flamingo","text":"AKA BFG9000 ( B ig F lamingo G un)","title":"Flamingo"},{"location":"onboarding/#mini-blaster","text":"AKA Noisy Cricket","title":"Mini-blaster"},{"location":"onboarding/#communicator","text":"","title":"Communicator"},{"location":"platformio/","text":"PlatformIO Visual Studio Code You can download VS Code from https://code.visualstudio.com/ . Don't worry about what other extensions you need, you can easily install them whenever you need them. PlatformIO extension Inside Visual Studio Code, go to the extensions tab. (CTRL+SHIFT+X) In the search bar, type \"platformio\" Install the one with the orange alien icon Hello World go to PlatformIO window (click on the alien face in the left column) Choose \"New Project\" Alternatively, if you see the \"PIO Home\" window, you can click \"+ new project\" there. For board, choose \"esp32-s3-devkitc-1\". PlatformIO will start downloading necessary libraries Open platformio.ini - you should see the following: [env:esp32-s3-devkitc-1] platform = espressif32 board = esp32-s3-devkitc-1 framework = arduino add the following lines at the bottom: board_build.arduino.memory_type = qio_opi board_build.partitions = default_16MB.csv board_upload.flash_size = 16MB monitor_speed = 115200 lib_deps = bodmer/TFT_eSPI@^2.5.33 build_flags = -DBOARD_HAS_PSRAM # N16R8V has PSRAM -DARDUINO_USB_MODE=1 # necessary for serial port -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port Examples in GitHub https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples If you just want to try all examples: In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino Click \"Fork\" You now have the same repository, but in your own profile Click the green button <> Code copy the URL you see in the pop-up Open the Git Bash CLI where you want to create the forked repository Type git clone and paste the URL from the Github repository Your own code on GitHub Download GIT from https://git-scm.com/downloads Create an account on https://github.com At the top of the screen, click \"+\", click \"New repository\" Follow the GitHub instructions to clone your repository to your local hard drive Code away! Open the Git Bash CLI in the root folder of your repository git add . git commit -m \"cool new program\" git push Check that your code has arrived on GitHub Your code in the Fri3d Camp repository In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino Click \"Fork\" You now have the same repository, but in your own profile Click the green button <> Code Copy the URL you see in the pop-up Open the Git Bash CLI where you want to create the forked repository Type git clone and paste the URL from the Github repository So far, the instructions are exactly the same as for downloading the examples In github click on main to create a new branch In the search bar, type a name of your choice, e.g. newexample Click create branch newexample from main Open the Git Bash CLI in the root folder of your repository git checkout -b newexample Add your example git add . git commit -m \"I created a new example\" git push in GitHub, click compare and pull request Add a nice description, Click Create pull request","title":"PlatformIO"},{"location":"platformio/#platformio","text":"","title":"PlatformIO"},{"location":"platformio/#visual-studio-code","text":"You can download VS Code from https://code.visualstudio.com/ . Don't worry about what other extensions you need, you can easily install them whenever you need them.","title":"Visual Studio Code"},{"location":"platformio/#platformio-extension","text":"Inside Visual Studio Code, go to the extensions tab. (CTRL+SHIFT+X) In the search bar, type \"platformio\" Install the one with the orange alien icon","title":"PlatformIO extension"},{"location":"platformio/#hello-world","text":"go to PlatformIO window (click on the alien face in the left column) Choose \"New Project\" Alternatively, if you see the \"PIO Home\" window, you can click \"+ new project\" there. For board, choose \"esp32-s3-devkitc-1\". PlatformIO will start downloading necessary libraries Open platformio.ini - you should see the following: [env:esp32-s3-devkitc-1] platform = espressif32 board = esp32-s3-devkitc-1 framework = arduino add the following lines at the bottom: board_build.arduino.memory_type = qio_opi board_build.partitions = default_16MB.csv board_upload.flash_size = 16MB monitor_speed = 115200 lib_deps = bodmer/TFT_eSPI@^2.5.33 build_flags = -DBOARD_HAS_PSRAM # N16R8V has PSRAM -DARDUINO_USB_MODE=1 # necessary for serial port -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port","title":"Hello World"},{"location":"platformio/#examples-in-github","text":"https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples If you just want to try all examples: In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino Click \"Fork\" You now have the same repository, but in your own profile Click the green button <> Code copy the URL you see in the pop-up Open the Git Bash CLI where you want to create the forked repository Type git clone and paste the URL from the Github repository","title":"Examples in GitHub"},{"location":"platformio/#your-own-code-on-github","text":"Download GIT from https://git-scm.com/downloads Create an account on https://github.com At the top of the screen, click \"+\", click \"New repository\" Follow the GitHub instructions to clone your repository to your local hard drive Code away! Open the Git Bash CLI in the root folder of your repository git add . git commit -m \"cool new program\" git push Check that your code has arrived on GitHub","title":"Your own code on GitHub"},{"location":"platformio/#your-code-in-the-fri3d-camp-repository","text":"In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino Click \"Fork\" You now have the same repository, but in your own profile Click the green button <> Code Copy the URL you see in the pop-up Open the Git Bash CLI where you want to create the forked repository Type git clone and paste the URL from the Github repository So far, the instructions are exactly the same as for downloading the examples In github click on main to create a new branch In the search bar, type a name of your choice, e.g. newexample Click create branch newexample from main Open the Git Bash CLI in the root folder of your repository git checkout -b newexample Add your example git add . git commit -m \"I created a new example\" git push in GitHub, click compare and pull request Add a nice description, Click Create pull request","title":"Your code in the Fri3d Camp repository"}]}